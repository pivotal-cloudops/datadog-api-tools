#!/usr/bin/env ruby
require 'json'
require 'dogapi'
require 'colorize'
require 'rationalist' # Simple option parser

def check_datadog_key(key)
  unless key
    puts "$DATADOG_KEY is required for this tool to function! Please set it.".red
    exit 1
  end
end

def hash_from_stdin
  begin
    input_hash = JSON.parse($stdin.read)
  rescue JSON::ParserError => e
    puts "Receieved a error parsing the JSON given: #{e}".red
    exit 1
  end

  input_hash
end

def additional_tags_array(tag_string)
  tag_string.split(',')
end

def help
  puts "Usage: #{$0}"
  puts "Options:"
  puts "  --metric           Name of the metric to store in datadog"
  puts "  --tag-prefix       Namespace prefix for metric tag"
  puts "  --verbose          Enable verbose output"
  puts "  --api-key          Your datadog api key (can also be set as $DATADOG_KEY)"
  puts "  --additional-tags  A list of additional tags you want to send, formatted like 'environment:prod,foo:bar'"
end

def args
  return @args if @args

  if ARGV.empty?
    help
    exit 1
  end

  argv = Rationalist.parse(ARGV)
  @args = argv

  @args[:verbose] = argv[:verbose] || argv[:v]
  @args[:help] = argv[:help] || argv[:h]
  @args[:datadog_api_key] = argv[:'api-key'] || ENV["DATADOG_KEY"]
  @args[:tag_prefix] = argv[:'tag-prefix']
  @args[:additional_tags] = argv[:'additional-tags']

  @args
end

if args[:help]
  help
  exit 0
end

check_datadog_key(args[:datadog_api_key])

dog = Dogapi::Client.new(args[:datadog_api_key])
threads = []

hash_from_stdin.each do |tag, count|
  threads << Thread.new do
    tags = additional_tags_array(args[:additional_tags]) if args[:additional_tags]

    tag = "#{args[:tag_prefix]}:#{tag}" if args[:tag_prefix]
    tags << tag
    response = dog.emit_point(args[:metric], count, tags: tags)

    status = response.first.to_i

    if status > 100 && status < 300
      Thread.current[:message] = "#{tag}: work completed.".green if args[:verbose]
    else
      Thread.current[:message] = "#{tag}: received a non-200 status code: #{response}".red if args[:verbose]
    end
  end
end

threads.each do |thread|
  thread.join
  puts thread[:message] if thread[:message]
end
